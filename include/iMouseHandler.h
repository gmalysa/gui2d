#ifndef _IMOUSE_HANDLER_H_
#define _IMOUSE_HANDLER_H_
/**
 * @class gui2d::iMouseHandler
 * Interface/base class for all objects that wish to receive mouse events. Note that this implicitly
 * makes the class implement the MBR interface, so plan accordingly.
 */

// Standard headers
#include <glm/glm.hpp>
#include <glm/gtc/type_precision.hpp>
#include <OIS/OIS.h>

// Project definitions
#include "2dgui/gui2d.h"
#include "2dgui/iMBR.h"

namespace gui2d {

class iMouseHandler : public iMBR {
public:
	/**
	 * Passes the MBR up the constructor chain
	 * @param bounds The bounds for this mouse-aware element
	 */
	iMouseHandler(const glm::vec4& bounds) : iMBR(bounds) {}
	virtual ~iMouseHandler(void) {}

	/**
	 * This method is called when a mouse pressed event is generated by OIS, from the manager
	 * @param x X coordinate of mouse press, normalized
	 * @param y Y coordinate of mouse press, normalized
	 * @param id The button ID telling us which button was pressed
	 * @return bool True if we should continue processing, false otherwise
	 */
	virtual bool mousePressed(float x, float y, OIS::MouseButtonID id) = 0;

	/**
	 * This method is called when a mouse released event is generated by OIS, from the manager
	 * @param x X coordinate of mouse release, normalized
	 * @param y Y coordinate of mouse release, normalized
	 * @param id The button ID telling us which button was released
	 * @return bool True if we should continue processing, false otherwise
	 */
	virtual bool mouseReleased(float x, float y, OIS::MouseButtonID id) = 0;
};

/**
 * @class gui2d::iMouseMotionHandler
 * This is the type for even more specialized mouse listeners which will receive
 * mouse motion events in addition to click events
 */
class iMouseMotionHandler : public iMouseHandler {
	/**
	 * Passes the MBR up the constructor chain
	 * @param bounds The bounds for this mouse-aware element
	 */
	iMouseMotionHandler(const glm::vec4& bounds) : iMouseHandler(bounds) {}
	~iMouseMotionHandler(void) {}

	/**
	 * This method is called when a mouse moved event is generated by OIS, from the manager
	 * @param x The new x coordinate of the mouse, normalized
	 * @param y The new y coordinate of the mouse, normalized
	 * @return bool True if we should continue processing, false otherwise
	 */
	virtual bool mouseMoved(float x, float y, const OIS::MouseEvent &e) = 0;
};

};

#endif
